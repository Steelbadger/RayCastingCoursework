#ifndef __RENDERER_H__
#define __RENDERER_H__
//////////////////////--By Ross Davies--//////////////////////
/*		The object handles the construction and
		rendering of the environment from the data
		provided by the level								*/
//////////////////////////////////////////////////////////////
#include "vector2.h"
#include "raycaster.h"
#include "primitives.h"
#include "texture.h"
 
#include "ps2maths.h"

#include <map>
#include <string>

class Renderer
{
public:
	//  Constructor
	Renderer();
	
	//  Destructor
	~Renderer();
	
	
	//  Draw the scene (call after building the scene)
	void DrawScene();
	
	//  Give the renderer a reference to the level of interest
	void SetLevel(Level* level);
	
	//  set the field of view (enter degrees)
	void SetFoV(float fov);
	
	//  Get the current field of view (in degrees)
	float GetFoV(){return (FoV*180/PI);}
	
	//  Load the textures required by the environment
	void InitTextures();
	
	//  set sprites to correct sizes (call after Constructing the depthmap)
	void BuildScene();
	
	//  Shoot rays into the level to find how far each scanline is from
	//  the camera
	void ConstructDepthMap();
	
	//  Returns the distance in the depthmap for the middle scanline of the screen 
	float GetCentreWallDistance();
	
	//  DEBUG FUNCTION for ouputing the depthmap to console
	void OutputDepthMap();
	
	//  Set the position from which the scene should be rendered
	void SetPosition(Vector2 pos);
	
	//  Set the direction in which the scene should be rendered
	void SetDirection(Vector2 dir);
	
	//  DEBUG FUNCTION for outputting the UVs of the current set of
	//  scanlines
	void UVSnapShot();
	
private:
	//  The number of horizontal scanlines
	static const int RES = 160;
	
	//  The maximum number of unique wall textures
	static const int NUMTEXTURES = 16;

	//  Storage for the distance data returned by the rays
	float depthMap[RES+1];
	
	//  Sprites used to draw each scanline
	PS2SpriteT sprites[RES];
	
	//  Storage for the data generated by the ray firing step
	RayReturnData rayMap[RES+1];
	
	//  The field of view (radians)
	float FoV;
	
	//  The current level to be rendered
	Level* currentLevel;
	
	//  The position and direction from which the level is to be rendered
	Vector2 position;
	Vector2 direction;
	
	//  DEPRECATED lookup for non textured sprites and wall colours
	static std::map<unsigned int, int> colourMap;
	
	//  file from which wall textures are loaded
	std::string textureFile;
	
	//  Base positions of the textures referenced by number in level array
	static Vector2 textureMap[NUMTEXTURES];

	//  The object used to do the actual raycasting
	RayCaster raycaster;
};
#endif